{"id":"5f21236bb4dbec001ee52cbf","title":"nwtgck: Webブラウザ上で純粋なHTTPだけで単方向リアルタイム通信を可能にするHTTPのストリーミングアップロードが遂にやってくる","image":"https://gyazo.com/37a9d37fee6aa495f17bbe83857d913e/raw","created":1596007278,"updated":1596007306,"lines":[{"id":"5f21236bb4dbec001ee52cbf","text":"nwtgck: Webブラウザ上で純粋なHTTPだけで単方向リアルタイム通信を可能にするHTTPのストリーミングアップロードが遂にやってくる","created":1596007278,"updated":1596007306},{"id":"5f21236c4ade4d0000476554","text":"\tWeb標準のHTTPクライアント`fetch()`でストリーミングしながらアップロードできるようになる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476555","text":"\t数行で画面共有したり、世界一シンプルかもしれないテキストチャットなども紹介したい。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476556","text":"[https://gyazo.com/37a9d37fee6aa495f17bbe83857d913e]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476557","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476558","text":"[*** なぜHTTPでのストリーミングアップロード？]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476559","text":"\t巨大なデータの暗号化・圧縮","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047655a","text":"\t終わりが決まっていない無限のデータ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047655b","text":"などをサーバーにアップロードすることがある。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047655c","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047655d","text":"今までも`<input type=\"file\">`から取得したFile（Blob）が巨大でも純粋なHTTPで送信できていた。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047655e","text":"だが、このファイルを圧縮したりクライアントサイドで暗号化しようとすると[* 全部メモリ上に展開する必要]がある。そのため巨大なファイルの圧縮や暗号化したものを単一のHTTPリクエストで送信することが不可能だった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047655f","text":"任意のストリームを[エンドツーエンド暗号化]（[E2E暗号化]）をすることも可能になる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476560","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476561","text":"終わりが分からない[* 無限のデータに関しても単一のHTTPリクエストで送信することは今まで不可能]だった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476562","text":"例えば「終わりが分からない」というのはブラウザ上で録画・録音しながらリアルタイムにWebサーバーに送信し続けるレコーダーなどが考えられる。こういった場合は[WebSocket]や[WebRTC]などのWebの技術を使う選択肢になると思う。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476563","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476564","text":"そして最も重要なのは[* これらは組み合わせることができる]こと。例えば録画・録音しながら圧縮しつつ暗号化してリアルタイムに送信することができる。[* ストリームは時間的にも空間的に効率の良い技術]。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476565","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476566","text":"[** なぜHTTPか？]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476567","text":"HTTPはとてもシンプル。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476568","text":"いざとなれば[ncコマンド]や[telnetコマンド]などで手で書くこともできる（[HTTP/1.1]）。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476569","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047656a","text":"HTTPは非常に多くの場所で使われている。iOS標準のShortchutアプリや[Microsoft Flow]などの自動化アプリやスマート家電の通信やDocker（/var/run/docker.sock ）などWebブラウザに限らずHTTPは使われている。そのいう点でHTTPは他のデバイスやソフトウェアと連携しやすいインターフェースだと考えてる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047656b","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047656c","text":"\tHTTP/1.1は成熟して枯れた技術で、","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047656d","text":"\tTCPを使いつつもパフォーマンスが向上した[HTTP/2]や","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047656e","text":"\tUDP上で設計された[QUIC]を使う[HTTP/3]など","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047656f","text":"HTTPは新しい技術がとりまれてこれからも互換性を保ちつつ発展している。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476570","text":"パフォーマンスだけではなく、[HTTP/3]が利用している[QUIC]には「[コネクションマイグレーション]」といったIPアドレスが変わっても接続し続けるような機能などもあるらしい。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476571","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476572","text":"そしてWebブラウザは多くのデバイスにすでにインストールされている。このWebブラウザでHTTPのボディをストリーミングしてアップロードする機能が搭載されることでさまざな用途での可能性が広がる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476573","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476574","text":"[*** どういう機能なのか？]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476575","text":"[* ひとことでいうと、以下ができるようになった]。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476576","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476577","text":" fetch(myUrl, {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476578","text":"   method: 'POST',","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476579","text":"   body: <ここにReadableStream>","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047657a","text":" })","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047657b","text":"仕様: [https://fetch.spec.whatwg.org/#concept-body-stream]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047657c","text":"fetchの`body: `のところに`ReadableStream`が使えるようになる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047657d","text":"いままで調べた限り[XMLHttpRequest]にもストリーミングアップロードの機能はなかった。つまりPolyfillも不可能だった。[WebSocket]を使うなど素のHTTPではない方法でサーバーサイドでどうにかするしかなかった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047657e","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047657f","text":"[** fetch()]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476580","text":"`fetch()`は[* ブラウザ標準で使えるHTTPのリクエストをするクライアント]。HTTPクライアントだとaxiosは人気のようだが`fetch()`は外部のライブラリ使用せず最初から使えるWeb標準の関数（広まって欲しい）。また`XMLHttpRequest`よりもモダンなAPIになっている。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476581","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476582","text":"[** ReadableStream]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476583","text":"[* ブラウザで使えるストリーム]。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476584","text":"例えば以下で無限の乱数バイト列を出し続けるストリームが作れる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476585","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476586","text":" // 無限の乱数バイト列","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476587","text":" new ReadableStream({","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476588","text":"   pull(ctrl) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476589","text":"     ctrl.enqueue(window.crypto.getRandomValues(new Uint32Array(128)));","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047658a","text":"   }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047658b","text":" })","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047658c","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047658d","text":"身近なところでは`(await fetch(...)).body`の型がReadableStreamになっている（HTTPレスポンスのボディ）。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047658e","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047658f","text":"[*** 主要ブラウザベンダーの関心]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476590","text":"この`fetch()`のストリーミングアップロードに関して主要なブラウザが関心があるかどうか。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476591","text":"以下を見ると、[Firefox]、[Safari]でも実装されそう。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476592","text":"[https://gyazo.com/aa7d3bba8a99e677573925bccfc2175a]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476593","text":"\t[Uploading a Request made from a ReadableStream body by yutakahirano · Pull Request #425 · whatwg/fetch https://github.com/whatwg/fetch/pull/425]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476594","text":"\t[Service Worker WG TPAC 2019 - Google Docs https://docs.google.com/document/d/1q090ovJ4gd8wSfVtvuoZLMZ51YkiFDsEZ0Jiqi41Iys/edit#heading=h.85gziabhajhg]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476595","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476596","text":"[*** MDNでの記述]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476597","text":"以下のように[MDN]でも`body`に`ReadableStream`が使えるようにだいぶ前から書かれていた。だが調べた限りそれを実装しているメジャーなブラウザは一つもなかった（[https://github.com/whatwg/fetch/pull/425#issuecomment-462634914]）。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476598","text":"[https://gyazo.com/594dbd91d89f84e471f876d264ccc4d8]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476599","text":"[WindowOrWorkerGlobalScope.fetch() - Web APIs | MDN https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047659a","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047659b","text":"[*** Google Chromeで実際に使う]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047659c","text":"現在[Google Chrome]のBetaまで使えるようになっている。（Version 85.0.4183.38 (Official Build) beta (64-bit)で確認）","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047659d","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047659e","text":"Chrome Betaのインストール: [Google Chrome Beta - Google Chrome https://www.google.co.jp/chrome/beta/]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047659f","text":"使用するには、`chrome://flags/`にアクセスして以下の「Experimental Web Platform features」をEnabledにする必要がある（トークンを使う方法もある）。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a0","text":"[https://gyazo.com/561cca07e57978fbc8e5b816111dc672]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a1","text":"[Streaming requests with the fetch API https://web.dev/fetch-upload-streaming/#enable-flags]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a2","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a3","text":"[*** テキストチャットを作る]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a4","text":"もしかすると世界一シンプルかもしれないブラウザでできる簡易テキストチャット。日本語や絵文字送れる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a5","text":"左側が送る人、右側が受け取る人。もう1組作れば右側から送ることもできる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a6","text":"[[https://gyazo.com/ef19138393e00f7f370461fb909dbf07]]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a7","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a8","text":"以下がコード。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765a9","text":"`<input>`の入力をReadableStreamにして、それをfetch()でPOSTするだけ。標準ライブラリのみで実現。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765aa","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ab","text":" const readableStream = new ReadableStream({","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ac","text":"   start(ctrl) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ad","text":"     const encoder = new TextEncoder();","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ae","text":"     window.myinput.onkeyup = (ev) => {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765af","text":"       if (ev.key === 'Enter') {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b0","text":"         ctrl.enqueue(encoder.encode(ev.target.value+'\\n'));","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b1","text":"         ev.target.value = '';","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b2","text":"       }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b3","text":"     }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b4","text":"   }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b5","text":" });","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b6","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b7","text":" fetch(\"https://ppng.io/mytext\", {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b8","text":"   method: 'POST',","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765b9","text":"   body: readableStream,","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ba","text":"   headers: { 'Content-Type': 'text/plain;charset=UTF-8' },","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765bb","text":"   allowHTTP1ForStreamingUpload: true,","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765bc","text":" });","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765bd","text":"フル: https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/text_stream.html","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765be","text":"`allowHTTP1ForStreamingUpload: true`は[Google Chrome]の一時的なプロパティ。これはHTTP/1.1でもこの機能を利用するため。（https://github.com/chromium/chromium/commit/4c75c0c9f730589ad8d6c33af919d6b105be1462#diff-0f684d35848d8674d6bd9c5673588856）","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765bf","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c0","text":"POST先の[https://ppng.io/]は[Piping Server]というサーバーになっている。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c1","text":"[Piping Server]を使うと`POST /hogehoge`したデータが`GET /hogehoge`で取得できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c2","text":"そのため上記のデモのように、受信側のクライアントはただ`https://ppng.io/mytext`をブラウザ開いているだけ。受信側のコードを書く必要はなかった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c3","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c4","text":"自前で[Piping Server]を立てて検証したいときはDockerがあれば`docker run -p 8181:8080 nwtgck/piping-server`で出来る。その他の方法：「[Piping Serverを自前でホストする方法をいくつか]」","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c5","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c6","text":"上記のコードは`readableStream.pipeThrough(new TextEncoderStream())`を使うとよりストリームを使っている感じになる。（フル: [https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/text_stream_with_text_encoder_stream.html]）","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c7","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c8","text":"[*** 画面共有を作る]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765c9","text":"以下のように画面がvideo_player.htmlを開いているブラウザに共有できている。これも標準ライブラリのみを使っている。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ca","text":"[[https://gyazo.com/37a9d37fee6aa495f17bbe83857d913e]]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765cb","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765cc","text":"以下が画面を送りたい側のコード。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765cd","text":"以下のほとんどはMediaStreamをReadableStreamに変換するコードが占めている。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ce","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765cf","text":" (async () => {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d0","text":"   // Get display","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d1","text":"   const mediaStream = await navigator.mediaDevices.getDisplayMedia({video: true});","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d2","text":"   // Convert MediaStream to ReadableStream","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d3","text":"   const readableStream = mediaStreamToReadableStream(mediaStream, 100);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d4","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d5","text":"   fetch(\"https://ppng.io/myvideo\", {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d6","text":"     method: 'POST',","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d7","text":"     body: readableStream,","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d8","text":"     allowHTTP1ForStreamingUpload: true,","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765d9","text":"   });","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765da","text":" })();","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765db","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765dc","text":" // Convert MediaStream to ReadableStream","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765dd","text":" function mediaStreamToReadableStream(mediaStream, timeslice) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765de","text":"   return new ReadableStream({","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765df","text":"     start(ctrl){","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e0","text":"       const recorder = new MediaRecorder(mediaStream);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e1","text":"       recorder.ondataavailable = async (e) => {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e2","text":"         ctrl.enqueue(new Uint8Array(await e.data.arrayBuffer()));","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e3","text":"       };","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e4","text":"       recorder.start(timeslice);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e5","text":"     }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e6","text":"   });","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e7","text":" }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e8","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765e9","text":"上記でやっていることは、","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ea","text":"\t`navigator.mediaDevices.getDisplayMedia({video: true})`で画面の映像のMediaStreamを手に入れる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765eb","text":"\tそのMediaStreamをReadableStreamに変換してfetch()でPOSTする。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ec","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ed","text":"以下は画面を見る側のコード。videoタグのみ。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ee","text":"code:html","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ef","text":" <video src=\"https://ppng.io/myvideo\" autoplay muted></video>","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f0","text":"さっきのテキストチャットと同様に[Piping Server]を使っている。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f1","text":"つまり`POST /myvideo`しているので`/myvideo`をvideoタグで指定すれば画面を見ることができる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f2","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f3","text":"[** コマンドラインとの高い親和性]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f4","text":"上記はvideoタグで閲覧した。その代わりにffplayを使えばコマンドライン上で閲覧することができる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f5","text":"以下のデモのように[curlコマンド]と[ffplayコマンド]だけで、画面共有ができる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f6","text":"code:bash","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f7","text":" curl https://ppng.io/myvideo | ffplay -","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f8","text":"[https://youtu.be/oORveGAFrt0]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765f9","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765fa","text":"fetch()でReadableStreamがPOSTできるようになって、WebブラウザからのPOSTを受信して表示することも、コマンドラインから画面共有してブラウザ表示することでもできるようになった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765fb","text":"関連：「[Piping Serverとffmpegで画面共有]」","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765fc","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765fd","text":"[* 今までcurlでできていたことがWebブラウザでもできるようになり、互換性・対称性が高まった]と思う。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765fe","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004765ff","text":"[*** 音声通話・ビデオ通話などなど]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476600","text":"Webブラウザ標準で音声やinカメラなどからのMediaStreamを取得できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476601","text":"嬉しいことに、多くのモバイルでのブラウザでも対応している。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476602","text":"[https://developer.mozilla.org/ja/docs/Web/API/MediaDevices/getUserMedia]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476603","text":"そのため、上記の`const mediaStream = `を変えるだけで同じコードで画面共有以外にも音声通話・ビデオ通話することもできる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476604","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476605","text":" // 音声","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476606","text":" navigator.mediaDevices.getUserMedia({ audio: { echoCancellation: true } })","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476607","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476608","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476609","text":" // ビデオ + 音声","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047660a","text":" navigator.mediaDevices.getUserMedia({ video: true, audio: { echoCancellation: true } })","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047660b","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047660c","text":"以下がコード。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047660d","text":"\t音声通話: [https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/simple_phone.html]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047660e","text":"\tビデオ通話: [https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/video_chat.html]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047660f","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476610","text":"[*** 映像にフィルタをつける]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476611","text":"[https://youtu.be/VcKJR8D8IFA]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476612","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476613","text":"HTMLのcanvasからも`.captureStream()`でMediaStreamを取得できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476614","text":"以下の関数はインメモリでvideoやcanvasを作って引数のMediaStreamを加工してMediaStreamを返す。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476615","text":"セピア調にするために[JSManipulate]というライブラリを利用した。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476616","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476617","text":" // ...略...","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476618","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476619","text":" // セピア調にするフィルタ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047661a","text":" async function sepiaMediaStream(mediaStream) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047661b","text":"   const memVideo = document.createElement('video');","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047661c","text":"   memVideo.srcObject = mediaStream;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047661d","text":"   await memVideo.play();","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047661e","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047661f","text":"   const width = memVideo.videoWidth;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476620","text":"   const height = memVideo.videoHeight;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476621","text":"   const srcCanvas = document.createElement('canvas');","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476622","text":"   const dstCanvas = document.createElement('canvas');","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476623","text":"   srcCanvas.width = dstCanvas.width = width;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476624","text":"   srcCanvas.height = dstCanvas.height = height;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476625","text":"   const srcCtx = srcCanvas.getContext('2d');","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476626","text":"   const dstCtx = dstCanvas.getContext('2d');","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476627","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476628","text":"   (function loop(){","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476629","text":"     srcCtx.drawImage(memVideo, 0, 0, width, height);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047662a","text":"     const frame = srcCtx.getImageData(0, 0, width, height);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047662b","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047662c","text":"     JSManipulate.sepia.filter(frame);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047662d","text":"     dstCtx.putImageData(frame, 0, 0);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047662e","text":"     setTimeout(loop, 0);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047662f","text":"   })();","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476630","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476631","text":"   return dstCanvas.captureStream();","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476632","text":" }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476633","text":"フル: [https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/screen_share_with_filter.html]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476634","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476635","text":"[** canvasの可能性]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476636","text":"可能性として、カメラからのMediaStreamを加工すれば、SnowやSnap CameraのようなフィルタをWebのクライアントサイドで作ることもできるはず。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476637","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476638","text":"またcanvasは色々できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476639","text":"[WebGL]もcanvasで描画する。[three.js – JavaScript 3D library https://threejs.org/]を見るとcanvasの可能性を感じると思う。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047663a","text":"個人的には[Infinitown | A WebGL Experiment by Little Workshop https://demos.littleworkshop.fr/infinitown]が好き。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047663b","text":"Webで[AR]や[VR]を実現する[WebXR]でもcanvasを使われている。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047663c","text":"これらcanvasに描画したものをMediaStreamで取得してリアルタイムで送信できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047663d","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047663e","text":"[*** エンドーツーエンド暗号化で画面共有]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047663f","text":"[エンドツーエンド]（[E2E暗号化]）をして画面共有する。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476640","text":"[E2E暗号化]することでサーバーを信用しなくても安全に通信ができる。そしてこれはクライアントサイドで暗号化することが必須。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476641","text":"[https://youtu.be/lxpxeB_0UDk]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476642","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476643","text":"暗号化には[OpenPGP.js]を利用している。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476644","text":"以下の関数で任意のreadableStreamをpasswordで暗号化できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476645","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476646","text":" // Encrypt ReadableStream with password by OpenPGP","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476647","text":" async function encryptStream(readableStream, password) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476648","text":"   const options = {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476649","text":"     message: openpgp.message.fromBinary(readableStream),","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047664a","text":"     passwords: [password],","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047664b","text":"     armor: false","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047664c","text":"   };","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047664d","text":"   const ciphertext = await openpgp.encrypt(options);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047664e","text":"   return ciphertext.message.packets.write();","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047664f","text":" }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476650","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476651","text":"映像を見る側が[PWA]などで使われる[Service Worker]を利用している。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476652","text":"目的は`https://localhost:8080/e2ee_screen_share/swvideo#myvideo\"`と指定すると復号された動画がHTTPでGETすること。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476653","text":"実際のコードは以下にある。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476654","text":"[https://github.com/nwtgck/piping-server-streaming-upload-htmls/tree/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/e2ee_screen_share]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476655","text":"（「[ファイルのストリーミング強制保存をクロスオリジンでも実現させるService Workerの裏技ぽい使い方]」も似たような[Service Worker]の使い方）","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476656","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476657","text":"Webブラウザには[Web Crypto]がある。これに安全な鍵生成や[ディフィー・ヘルマン鍵共有]をするなども可能。（詳細：[Web Cryptoで楕円曲線ディフィー・ヘルマン鍵共有して、暗号化 & 復号]）","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476658","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476659","text":"画面共有に限らず今まで紹介した例やこれからの例のすべてでこの[E2E暗号化]と組み合わせることができる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047665a","text":"つまり[E2E暗号化]で画面共有・音声通話・ビデオ通話・チャット・ファイル転送などなどできる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047665b","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047665c","text":"いままでの`fetch()`ではクライアントサイドで暗号化するときはデータをすべてメモリ上に展開する必要があった。だが今回のfetch()の機能によりストリームの暗号化ができるようになりWebブラウザでの[E2E暗号化]での可能性が広がった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047665d","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047665e","text":"[*** 圧縮]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047665f","text":"[[https://gyazo.com/b80ce27065ec3e9ed79c2195d49b6376]]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476660","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476661","text":"Chromeでは`readableStream.pipeThrough(new CompressionStream('gzip'))`とすればgzipの圧縮もできる。以下はコード例。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476662","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476663","text":" const readableStream = new ReadableStream({","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476664","text":"   pull(ctrl) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476665","text":"     // random bytes","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476666","text":"     ctrl.enqueue(window.crypto.getRandomValues(new Uint32Array(128)));","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476667","text":"   }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476668","text":" }).pipeThrough(new CompressionStream('gzip'))","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476669","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047666a","text":" fetch(\"https://ppng.io/mytext\", {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047666b","text":"   method: 'POST',","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047666c","text":"   body: readableStream,","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047666d","text":"   allowHTTP1ForStreamingUpload: true,","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047666e","text":" });","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047666f","text":"https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/gzip_inifinite_stream.html","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476670","text":"無限にランダムなバイト列を圧縮したバイト列を送信している。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476671","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476672","text":"ReadableStreamから得たバイト列を圧縮する実装をすればgzipに限らず色々な圧縮ができると思う。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476673","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476674","text":"暗号化や可逆圧縮に限らず、巨大な動画のクライアントサイドでエンコードをしながらアップロードしたりなどもできるはず。[ffmpeg]を[Emscripten]でブラウザで動くようにするプロジェクトはある。そういうプロジェクトでReadableStreamな動画がエンコード出来れば実現可能だろう。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476675","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476676","text":"[*** HTTPのアップロードの読み取りの進捗]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476677","text":"[https://gyazo.com/24d9ddd32f147e0fe681d807a2bc1734]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476678","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476679","text":"[XMLHTTPRequest]にできて[fetch]にできないことの一つにアップロードの進捗を知る機能がある。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047667a","text":"それをReadableStreamがアップロードできることで\"多少\"可能にすることができるようになった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047667b","text":"以下のようにchunk.byteLengthを数えるやりかた。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047667c","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047667d","text":" // 進捗付きにする","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047667e","text":" const readableStreamWithProgress = readableStream.pipeThrough(progressStream(loaded => {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047667f","text":"   const progress = window.progress_bar.value = loaded / file.size * 100;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476680","text":"   window.message.innerText = `${loaded} bytes (${progress.toFixed(2)}%)`;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476681","text":" }));","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476682","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476683","text":" // ...省略...","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476684","text":" ","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476685","text":" function progressStream(callback) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476686","text":"   let loaded = 0;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476687","text":"   callback(loaded);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476688","text":"   return new TransformStream({","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476689","text":"     transform(chunk, ctrl) {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047668a","text":"       ctrl.enqueue(chunk);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047668b","text":"       loaded += chunk.byteLength;","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047668c","text":"       callback(loaded);","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047668d","text":"     }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047668e","text":"   });","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047668f","text":" }","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476690","text":"フル: https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/file_upload_progress_with_transformstream.html","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476691","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476692","text":"注意点は、あくまでも読み取ったバイト数であり、アップロード済みのバイト数ではないこと。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476693","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476694","text":"同じことを`TransformStream`ではなく`ReadableStream`を使った実装例: [https://github.com/nwtgck/piping-server-streaming-upload-htmls/blob/a107dd1fb1bbee9991a9278b10d9eaf88b52c395/file_upload_progress.html]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476695","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476696","text":"[*** fetch()がReadableStreamをアップロードできるかの判定]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476697","text":"以下のようにしてこの機能に対応しているブラウザかどうか判定できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476698","text":"code:js","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d0000476699","text":" const supportsRequestStreams = !new Request('', {","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047669a","text":"   body: new ReadableStream(),","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047669b","text":"   method: 'POST',","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047669c","text":" }).headers.has('Content-Type');","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047669d","text":"引用元: [Streaming requests with the fetch API https://web.dev/fetch-upload-streaming/#feature-detection]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047669e","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d000047669f","text":"上記はReadableStreamのアップロードに非対応だと、`\"[object ReadableStream]\"`がアップロードされてしまうことを利用している様子。その結果おそらく`Content-Type: text/plain ...`がつく仕様になっているのだと思う。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a0","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a1","text":"[*** 任意のプロトコル]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a2","text":"任意のReadableStreamを流し込める。任意のバイト列でも転送できる。つまり任意のプロトコルのバイト列を流し込むこともできる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a3","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a4","text":"「[Piping Server を介した双方向パイプによる，任意のネットワークコネクションの確立 - Qiita https://qiita.com/Cryolite/items/ed8fa237dd8eab54ef2f]」ではHTTPのみで任意のプロトコルをトンネリングできることが示された。実際にSSHでcurlとsocatのみでできている。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a5","text":"つまり、WebブラウザサイドでSSHクライアントを実装できれば、原理上HTTPだけでSSHができるなどの可能性がある。その他にもVNCクラインとが作れれば、リモート操作などもできるかもしれない。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a6","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a7","text":"[*** 現在のChromeでは双方向は制限されている]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a8","text":"「[Streaming requests with the fetch API https://web.dev/fetch-upload-streaming/#no-duplex-communication]」でも触れられているとおり、現在の[Google Chrome]実装では双方向には対応していない。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766a9","text":"`const res = await fetch(...)`の`res.body`もReadableStreamになっている。アップロードが完了するまでPromiseがresolveせず`await`し続ける様子。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766aa","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766ab","text":"単方向を2つを双方向を実現できるとも思う。[HTTP/2]であれば同じTCPソケットに複数のHTTPリクエストがまとまり、2つHTTPリクエストするのも悪くないように思う。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766ac","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766ad","text":"[*** まとめ]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766ae","text":"\tfetch()でReadableStreamをアップロード出来るようになった。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766af","text":"\tReadableStreamが使えることで、すべてをメモリ上に展開せずに済み、巨大・無限のデータを転送できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b0","text":"\tReadableStreamは圧縮・暗号化など加工することができる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b1","text":"\t<canvas>や画面や音声やカメラなどをReadableStreamにしてHTTPで転送できる。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b2","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b3","text":"[*** サンプルコードの使い方]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b4","text":"このページは以下のサンプルコードをリンクした。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b5","text":"[https://github.com/nwtgck/piping-server-streaming-upload-htmls]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b6","text":"READMEにあるように、リポジトリのルートで`python3 -m http.server`などして、[https://localhost:8000]にブラウザで開くことを想定している。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b7","text":"また`https://ppng.io/hogehoge`のhogehogeの部分は実行するために自分用に変えるか","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b8","text":"[Piping Serverを自前でホストする方法をいくつか]で[Piping Server]自体を自前で立てるのが良いと思う。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766b9","text":"localでHTTPSするときは「[localhostの自己署名SSL証明書をブラウザに信用させてHTTPSで通信する（Mac）]」などが使える。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766ba","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766bb","text":"[*** おまけ]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766bc","text":"[HTTP/1.1]でストリミーングされるときに[Transfer-Encoding: chunked]になる。つまりチャンクごとにバイト数がテキストで挿入される。以下は、それでどれぐらいデータが増えるのか調べたもの。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766bd","text":"[HTTPのTransfer-Encoding: chunkedした時のデータの増量は0.0174%程度だった]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766be","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766bf","text":"[* HTTPは1つのリクエストだけでも1110TB転送]できたりする。REST APIやWebページ閲覧のように短いHTTPリクエストだけでないHTTPの力が広まって欲しい。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766c0","text":"[HTTPで1110TB転送できている記録（Piping Server）]","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766c1","text":"","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766c2","text":"いままで[curlコマンド]で当たり前のようにできていたストリーミングしながらアップロードがWebブラウザでもできるようになったので嬉しい。stableでのリリースが楽しみ。","created":1596007278,"updated":1596007278},{"id":"5f21236c4ade4d00004766c3","text":"from [/nwtgck/Webブラウザ上で純粋なHTTPだけで単方向リアルタイム通信を可能にするHTTPのストリーミングアップロードが遂にやってくる]","created":1596007278,"updated":1596007278}]}