{"id":"5dafcf8eb9274e00173a6b7b","title":"クライアントサイドのモデルとは何か 後編 ~ 単方向データフローと参照透過性 - mizchi's blog","image":"https://gyazo.com/5a1dd032fbe5320467318c08cbf00e83/raw","created":1571803023,"updated":1571803041,"lines":[{"id":"5dafcf8eb9274e00173a6b7b","text":"クライアントサイドのモデルとは何か 後編 ~ 単方向データフローと参照透過性 - mizchi's blog","created":1571803023,"updated":1571803023},{"id":"5dafcf8f4ade4d000070c1a3","text":"[クライアントサイドのモデルとは何か 後編 ~ 単方向データフローと参照透過性 - mizchi's blog http://mizchi.hatenablog.com/entry/2018/05/17/220431]","created":1571803023,"updated":1571803023},{"id":"5dafcf8f4ade4d000070c1a4","text":"[https://gyazo.com/5a1dd032fbe5320467318c08cbf00e83 http://mizchi.hatenablog.com/entry/2018/05/17/220431]","created":1571803023,"updated":1571803023},{"id":"5dafcf8f4ade4d000070c1a6","text":"\t[View] における [Model] は描画の単位がバラバラになった結果、状態もバラバラになってしまったが、本質的に状態とは[ユーザ]に対する[シングルトン]であるので一枚の状態として表現できる","created":1571803023,"updated":1571803039},{"id":"5dafcf8f4ade4d000070c1a7","text":" \tそれには[描画][コスト]がかかるのでやってなかったが [React] によってそれは打ち破られた","created":1571803023,"updated":1571803023},{"id":"5dafcf8f4ade4d000070c1a9","text":"","created":1571803023,"updated":1571803036},{"id":"5dafcf8f4ade4d000070c1ab","text":"#20180518 #0518","created":1571803023,"updated":1571803028},{"id":"5dafcf8f4ade4d000070c1ac","text":"","created":1571803023,"updated":1571803023}]}