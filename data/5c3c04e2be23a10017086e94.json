{"id":"5c3c04e2be23a10017086e94","title":"emo-react をリファクタした - dev.jgs.me","image":null,"created":1446735600,"updated":1569923705,"lines":[{"id":"5c3c04e24ade4d0000c9e4cd","text":"emo-react をリファクタした - dev.jgs.me","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4cf","text":"[https://github.com/e-jigsaw/emo-react/pull/4 https://github.com/e-jigsaw/emo-react/pull/4]","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d0","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d1","text":"しばらく触らぬ間に [React] がアップデートしてたり、[Redux] が [flux] のデファクトっぽくなってたりしたので学習も兼ねてアップグレードした。細々気付いたこととか。","created":1446735600,"updated":1569923663},{"id":"5c3c04e24ade4d0000c9e4d2","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d3","text":"[*** React 0.14 所感]","created":1446735600,"updated":1569923651},{"id":"5c3c04e24ade4d0000c9e4d4","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d5","text":"`0.13` から細々変わっていて、react に元々いたメソッドが `react-dom` に移ったりしていて","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d6","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d7","text":" `render` は単純に移った","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d8","text":" `@refs.something.getDOMNode!...` としていたところが `findDOMNode @refs.something` のような感じになっていた","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4d9","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4da","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4db","text":"あたりで躓いたが、react は懇切丁寧にエラーを投げてくれるので対処も容易であった。ちなみに、このリポジトリ自体は `0.12` の頃に作っていたので `React.Component` などもない前提で作っていたが、`0.13` を他で触っていたので特にこのあたりは困らなかった。","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4dc","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4dd","text":"[*** Redux 所感]","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4de","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4df","text":"群雄割拠していた flux ライブラリも雰囲気 redux に落ち着いてきてるような感覚でいるのだけれど、どうなんだろう。redux は root の要素の state を store として、それに対してアクションを発行して更新していく〜というような概要ぐらいしか知らなかったのだが実際にアプリケーションを組んでいくと、各所に散らばっていた state <-> prop のごちゃごちゃを action と reducer に統合してアプリケーションの状態というものをこれによって表現できるというあたりが良さなんだと感じた。","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e0","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e1","text":"最初は分からなかったが、reducers の key が root の要素の prop になるので、root の、ひいては root 下のコンポーネントで必要な情報とは何かというのを整理していけば自然と reducers が出来上がっていく。あとはこのオブジェクトを redux の `combine-reducers` に食わしてやれば OK。","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e2","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e3","text":"reducers を作っていくのと平行して、reducers を更新する行動を整理していくのが actions を作っていくことのように感じた。reducers と actions は共にただの関数だったり、オブジェクトだったりするのでそこを意識して素直に書けばよかった。","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e4","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e5","text":"ハマったのは、reducer A が更新されたら reducer B も更新されてほしい、というようなとき。最初は単一の reducer にして state のプロパティを更新するだけ、というような方式にしていたのだが、これだとどうしても `Object.assign` が必要で、Polyfill をいれるにもダルいし、あんまり綺麗じゃないなーとおもって四苦八苦した。最終的に分かったのは、`redux-thunk` という middleware を使うと action で `(dispatch, get-state)` を引数にとる関数を定義することができるので、`get-state` から必要になる情報を引き出して適切なアクションを `dispatch` してやればいい、ということだった。","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e6","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e7","text":"また、非同期処理を含む action に関しても同様で上記のような関数を定義して非同期処理の Promise でも callback でも適当なところでアクションを `dispatch` すればいいようだった。","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e8","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4e9","text":"ただ、微妙な解決になってしまったのがこの `redux-thunk` を `apply-middleware` するときで、ES2015 だと `applyMiddleware(middleware)(reducers)` というようなインターフェイスで ls からは少し書きづらかった。(別にそこを求めたいわけではないが...)","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4ea","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4eb","text":"最終的に","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4ec","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4ed","text":"code: (livescript)","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4ee","text":" apply-middleware thunk-middleware |> (.call @, create-store) |> (.call @, reducers)","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4ef","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f0","text":"みたいな、pipe と assign short-hand を使って `call` することにした。。。冷静に考えると普通に括弧使って書いた方が簡潔な気がする。。。あと `connect` も 関数をとって関数を返すような実装になっているので","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f1","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f2","text":"code: (livescript)","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f3","text":"   connect do","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f4","text":"     (state)-> state","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f5","text":"   <| App","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f6","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f7","text":"のような感じで書かないとダメだった。","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f8","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4f9","text":"[*** Node.js v5.0.0]","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4fa","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4fb","text":"npm@3 使ってみたさ故に v5.0.0 で開発してみたが、特に困ることはなかった。ウワサ通り `node_modules` は猛烈に flat になったし、インストールや run-script の実行なんかでもプログレスバーがアニメーションするようになったりして気持ちよかった。[Docker Hub] にもリリースされているので、[Wercker] でこれを使ってビルドしたがこちらも遜色なく。","created":1446735600,"updated":1569923705},{"id":"5c3c04e24ade4d0000c9e4fc","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4fd","text":"[*** その他]","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4fe","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e4ff","text":"使っている [PureCSS] をアップデートしたり、[gulp] から [npm-run-all] に切り替えたり、[aja] を [isomorphic-fetch] に換えたりした。","created":1446735600,"updated":1569923696},{"id":"5c3c04e24ade4d0000c9e500","text":"","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e501","text":"[* original: http://dev.jgs.me/2015/11/06/refactoring-emo-react]","created":1446735600,"updated":1446735600},{"id":"5c3c04e24ade4d0000c9e502","text":"#20151106 #1106","created":1446735600,"updated":1569923677},{"id":"5d9322594ade4d000005ff18","text":"","created":1569923673,"updated":1569923673}]}