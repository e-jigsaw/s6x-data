{"id":"66c45bf799e200001ce07c3c","title":"GCP Workflows チョットワカッタ","image":null,"created":1724144631,"updated":1724144636,"lines":[{"id":"66c45bf799e200001ce07c3c","text":"GCP Workflows チョットワカッタ","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50d5","text":"from [20240816] #0816","created":1724144631,"updated":1724144636},{"id":"66c45bf74ade4d00000b50d6","text":"[GCP Workflows] チョットワカッタ","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50d7","text":"\tこの大コンテナ時代に何をって感じではあるが、諸事情あって [GCE] でバッチ的にジョブを動かしたいという話があって、[GCP Batch] と [GCP Workflows] 何も分からない状態からチョットワカル状態になった","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50d8","text":"\t概念としては、","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50d9","text":"\t\tBatch はスケジューラというか、これこれこういうスペックのマシンでこういうスクリプトを都合いいときに実行してくれる屋さん","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50da","text":"\t\t\tコンテナをランタイムとするパターンと、GCE をランタイムとするパターンがあり、今回は後者を使う","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50db","text":"\t\tWorkflows は GCP の API を数珠繫ぎにしたり、並列実行したりなんだりできて、Cloud Scheduler で Workflows にランタイム引数を渡してあげると、最終 [yaml] が錬成されて、それをステップ実行してくれる屋さん","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50dc","text":"\t\t\tGCP の API であれば割と柔軟性は高そうで、今回は Batch の api を yaml に書いて batch をキューに追加して実行する〜てな yaml を書けば OK だった","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50dd","text":"\tまずは Batch でどんな感じでタスクが実行されるのかいろいろ確認してたのだが、コンソール上でディスクをマウントするオプションはあるのだけど、GCE でやりたいってのはいろいろ下ごしらえをしたイメージをブートしてやりたいので、どーすりゃええねんとなった","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50de","text":"\t\t正解は、GCE のイメージってところで「イメージを作成する」ってのをやると、実行中(一応インスタンスはシャットダウンしてある)の GCE の VM からブータブルのイメージを作成してくれて、これを `allocationPolicy.instances[].policy.bootDisk.image` に設定してやると下ごしらえしたイメージから起動できた","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50df","text":"\t\t\tんでもってコンソール上ではこのオプションは存在してなくて、ローカルで json ファイルを作成して gcloud で submit して動作確認ができた","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e0","text":"\t\t\tWorkflows で扱う時は結局この API の形が再利用できる","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e1","text":"\t\t同様に `policy.provisioningModel` を `SPOT` にするとスポットインスタンスで起動してくれるらしい。どれぐらい安いのかはわからん","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e2","text":"\t\tあとデフォルトだと e2 の highCPU 的なやつが立ち上がってきて、そんなにいらないので `policy.machineType` にほどほどのスペックを指定してやればよかった","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e3","text":"\tあとはまあ、Workflows のシンタックスリファレンスを読みつつ、久々に yaml をがんばって書いた","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e4","text":"\t\tyaml で困ったのは、今回ちょっとめんどい話で `script.text` にシリアライズした [JSON] をコマンドの引数として渡したいというのがあって、さらに Workflows のランタイム引数もとるので `${\"hoge \\\"\" + foo + \"\\\" {\\\\\\\"hoge...` みたいな、嵐のようなバックスラッシュを連打させられたという","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e5","text":"\t\tあとは yaml なのか GCP のパーサの問題なのかわからんが、Expression のダブルクォートの中に `:` が含まれてると壊れるという問題もあって、`init.assign` 以下に逃がしてあげて、シングルクォートで定義して、変数として指定する、というアホな解決法で乗り切った","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e6","text":"\t今回 GCE 起点でいろいろサービスを経由したりキックしたりする感じのことをやったのだけど、個人的にかつて [IFTTT] とかでパイプ処理みたいなピタゴラ装置を作ってきたので、こうしていろいろなサービスをオーケストレーションするのは楽しい","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e7","text":"\t\tただ....yaml を書くのが楽しいかというとそういうわけではないのだけど....","created":1724144631,"updated":1724144631},{"id":"66c45bf74ade4d00000b50e8","text":"","created":1724144631,"updated":1724144631}]}