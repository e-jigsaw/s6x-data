{"id":"63ab8918c7d2e4001e9f388d","title":"20221228","image":null,"created":1672186139,"updated":1672190916,"lines":[{"id":"63ab8918c7d2e4001e9f388d","text":"20221228","created":1672186139,"updated":1672186139},{"id":"63ab891b4ade4d000084e3ec","text":"#1228","created":1672186139,"updated":1672186140},{"id":"63ab891b4ade4d000084e3ed","text":"","created":1672186139,"updated":1672186139},{"id":"63ab891c4ade4d000084e3ee","text":"[Next.js] から [Astro] に遷宮","created":1672186141,"updated":1672186169},{"id":"63ab89284ade4d000084e3f0","text":"\t[201909]あたりに Next.js へ遷宮した自分のポータルサイト的なやつを Astro に書き換えた","created":1672186152,"updated":1672186407},{"id":"63ab8a114ade4d000084e3f1","text":"\t\t[Scrapbox を中心にしたコンテンツ生成]","created":1672186385,"updated":1672186385},{"id":"63ab8fd44ade4d000084e3ff","text":"\t\thttps://github.com/kbystk/y/pull/31","created":1672187861,"updated":1672187861},{"id":"63ab8a274ade4d000084e3f2","text":"\tnext@13 で追加された `appDir` がまだ Static Export に対応していなかったのと、[React] も next も元々オーバーキル感が強くて微妙だとおもっていたので思い切って書き換えた","created":1672186408,"updated":1672186546},{"id":"63ab8ab34ade4d000084e3f3","text":"\t\t当時は [SSG] でイイ感じにパッケージングされてる選択肢が限られていて、消極的に next を採用したのもあり","created":1672186547,"updated":1672186607},{"id":"63ab8ad74ade4d000084e3f4","text":"\t最近はすっかり [vite] ばっかり使ってて、いける手応えが結構ある","created":1672186584,"updated":1672186665},{"id":"63ab8b2a4ade4d000084e3f5","text":"\t\t[Sveltekit] か [Qwik City] あたりも検討したが、[Svelte] はやっぱり svelte のテンプレートの記法に抵抗感があるのと、Qwik はまだ1.0じゃないのもあるけどいろいろ不安定で変更も多いので","created":1672186666,"updated":1672186857},{"id":"63ab8b6a4ade4d000084e3f6","text":"\t\tAstro は1.0出たし、テンプレートの記法はベター JSX といってよいと感じる","created":1672186730,"updated":1672186875},{"id":"63ab8c004ade4d000084e3f7","text":"\t\t\tもちろん JSX はコンパイルすればピュアな JS に落ちるという利点があるとはおもうが、だから何？って最近はおもってきた","created":1672186880,"updated":1672186920},{"id":"63ab8c284ade4d000084e3f8","text":"\t\t\tどうせ [TypeScript] で書くし、[babel] はもうほぼ使わんけど [swc] にせよなんらかのコンパイルは挟むわけなので、じゃあ多少のテンプレートは許容できるかなと","created":1672186920,"updated":1672187056},{"id":"63ab8e384ade4d000084e3f9","text":"\tTIL","created":1672187449,"updated":1672187470},{"id":"63ab8e4f4ade4d000084e3fa","text":"\t\tsvg をインラインで読みたい:","created":1672187472,"updated":1672187486},{"id":"63ab8e5e4ade4d000084e3fb","text":"\t\t\tfrontmatter 部分に `const { default: innerHTML } = await import(\"some.svg?raw\");` てな具合で import すると `innerHTML` には svg の中身が string として格納されるので、あとはこいつをテンプレートで参照すればよい","created":1672187486,"updated":1672187547},{"id":"63ab8ee34ade4d000084e3fc","text":"\t\tjson の string を union に upcast したい:","created":1672187620,"updated":1672187659},{"id":"63ab8f0b4ade4d000084e3fd","text":"\t\t\tjson の特定の key には string の union として提供されている型の中身しか入ってないけど、それを表現する術がねえ....と困るのだが、`hoge as Foo` 的な感じで `as` を使っても、string は `Foo` に upcast できないよ〜んと怒られてしまう","created":1672187660,"updated":1672187745},{"id":"63ab8f624ade4d000084e3fe","text":"\t\t\tあまり good なプラクティスにはみえないけど `hoge as unknown as Foo` と一旦 `unknown` に落としてやることで無理矢理 upcast できる","created":1672187746,"updated":1672187792},{"id":"63ab9b724ade4d000084e400","text":"\t\tVSC でフォーマットされたい:","created":1672190834,"updated":1672190848},{"id":"63ab9b7f4ade4d000084e401","text":"\t\t\tAstro の ext 入れたらイイ感じになるのかなとおもったら別途 [prettier] の設定をいれないとダメだった","created":1672190848,"updated":1672190870},{"id":"63ab9b964ade4d000084e402","text":"\t\t\t\thttps://github.com/withastro/prettier-plugin-astro","created":1672190871,"updated":1672190871},{"id":"63ab9b974ade4d000084e403","text":"\t\t\t\tまた、[pnpm] 使ってると巻き上げられてるので https://github.com/withastro/prettier-plugin-astro#pnpm-support-1 に従って設定しておく","created":1672190872,"updated":1672190916},{"id":"63ab891d4ade4d000084e3ef","text":"","created":1672186141,"updated":1672186141}]}